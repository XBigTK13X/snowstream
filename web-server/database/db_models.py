import sqlalchemy as sa
import sqlalchemy.orm as sorm
from typing import List

# Reminder -> back_populates is necessary to avoid a bunch of warnings and subtle bugs
from database.sql_alchemy import BaseModel

def set_primary_images(model):
    model.screencap_image = None
    model.poster_image = None
    screencap_is_meta = False
    poster_is_meta = False
    if not model.image_files:
        return model
    for image_file in model.image_files:
        if not model.poster_image or poster_is_meta:
            if 'poster' in image_file.kind:
                model.poster_image = image_file
                poster_is_meta = '/metadata/' in image_file.local_path
        if not model.screencap_image or screencap_is_meta:
            if 'screencap' in image_file.kind:
                model.screencap_image = image_file
                screencap_is_meta = '/metadata/' in image_file.local_path
    return model

class Stub:
    def __init__(self):
        pass

class User(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'snowstream_user'
    __tablename__ = "snowstream_user"
    username = sa.Column(sa.Text, nullable=False)
    display_name = sa.Column(sa.Text, nullable=True)
    hashed_password = sa.Column(sa.Text, nullable=True)
    enabled = sa.Column(sa.Boolean)
    permissions = sa.Column(sa.Text)
    has_password = sa.Column(sa.Boolean, nullable=False)
    access_tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="user_tag")
    access_shelves: sorm.Mapped[List["Shelf"]] = sorm.relationship(secondary="user_shelf")
    access_stream_sources: sorm.Mapped[List["StreamSource"]] = sorm.relationship(secondary="user_stream_source")

    def is_admin(self):
        return 'admin' in self.permissions

# This is a ticket for admission
# It tells snowstream
# - who the user is
# - what device the user is on
# - who counts for having watched content
# - what content the user is allowed to view
# This is only generated by the app server, and never stored in the DB
class Ticket:
    def __init__(self):
        self.client = None
        self.cduid = None
        self.watch_group = None
        self.tag_ids = None
        self.shelf_ids = None
        self.stream_source_ids = None

    def has_shelf_restrictions(self):
        return self.shelf_ids != None

    def has_tag_restrictions(self):
        return self.tag_ids != None

    def has_stream_source_restrictions(self):
        return self.stream_source_ids != None

    def is_allowed(self,
        stream_source_id:int=None,
        tag_id:int=None,
        shelf_id:int=None,
        tag_ids:list[int]=None,
        tag_provider=None
    ):
        if stream_source_id != None:
            if self.stream_source_ids == None:
                return True
            return stream_source_id in self.stream_source_ids
        if tag_id != None:
            if self.tag_ids == None:
                return True
            return tag_id in self.tag_ids
        if shelf_id != None:
            if self.shelf_ids == None:
                return True
            return shelf_id in self.shelf_ids
        if tag_ids != None:
            if self.tag_ids == None:
                return True
            if not tag_ids:
                return False
            for allowed_tag_id in self.tag_ids:
                if allowed_tag_id in tag_ids:
                    return True
            return False
        if tag_provider != None:
            if self.tag_ids == None:
                return True
            tag_ids = tag_provider()
            if not tag_ids:
                return False
            for allowed_tag_id in self.tag_ids:
                if allowed_tag_id in tag_ids:
                    return True
            return False
        return True

class UserTag(BaseModel):
    __tablename__ = "user_tag"
    user_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("snowstream_user.id"))
    tag_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("tag.id"))

class UserShelf(BaseModel):
    __tablename__ = "user_shelf"
    user_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("snowstream_user.id"))
    shelf_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("shelf.id"))

class UserStreamSource(BaseModel):
    __tablename__ = "user_stream_source"
    user_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("snowstream_user.id"))
    stream_source_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("stream_source.id"))

class ClientDevice(BaseModel):
    __tablename__ = "client_device"
    reported_name = sa.Column(sa.Text)
    display_name = sa.Column(sa.Text)
    device_kind = sa.Column(sa.Text)

class ClientDeviceUser(BaseModel):
    __tablename__ = "client_device_user"
    user_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("snowstream_user.id"),nullable=False)
    client_device_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("client_device.id"),nullable=False)
    isolation_mode = sa.Column(sa.Text)
    last_connection = sa.Column(sa.DateTime)

class WatchProgress(BaseModel):
    __tablename__ = 'watch_progress'
    client_device_user_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("client_device_user.id"),nullable=False
    )
    client_device_user: sorm.Mapped["ClientDeviceUser"] = sorm.relationship()
    show_episode_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("show_episode.id"),nullable=True
    )
    show_episode: sorm.Mapped['ShowEpisode'] = sorm.relationship()
    movie_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("movie.id"),nullable=True
    )
    movie: sorm.Mapped['Movie'] = sorm.relationship()
    streamable_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("streamable.id"),nullable=True
    )
    streamable: sorm.Mapped['Streamable'] = sorm.relationship()
    played_seconds = sa.Column(sa.Float)
    duration_seconds = sa.Column(sa.Float)

class WatchCount(BaseModel):
    __tablename__ = 'watch_count'
    client_device_user_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("client_device_user.id"),nullable=False
    )
    client_device_user: sorm.Mapped["ClientDeviceUser"] = sorm.relationship()
    show_episode_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("show_episode.id"),nullable=True
    )
    show_episode: sorm.Mapped['ShowEpisode'] = sorm.relationship()
    movie_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("movie.id"),nullable=True
    )
    movie: sorm.Mapped['Movie'] = sorm.relationship()
    streamable_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("streamable.id"),nullable=True
    )
    streamable: sorm.Mapped['Streamable'] = sorm.relationship()
    amount = sa.Column(sa.Integer)

class Watched(BaseModel):
    __tablename__ = 'watched'
    client_device_user_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("client_device_user.id"),nullable=False
    )
    client_device_user: sorm.Mapped["ClientDeviceUser"] = sorm.relationship()
    shelf_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("shelf.id"),nullable=True
    )
    movie: sorm.Mapped['Movie'] = sorm.relationship()
    movie_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("movie.id"),nullable=True
    )
    show: sorm.Mapped['Show'] = sorm.relationship()
    show_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("show.id"),nullable=True
    )
    show_season: sorm.Mapped['ShowSeason'] = sorm.relationship()
    show_season_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("show_season.id"),nullable=True
    )
    show_episode: sorm.Mapped['ShowEpisode'] = sorm.relationship()
    show_episode_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("show_episode.id"),nullable=True
    )
    streamable: sorm.Mapped['Streamable'] = sorm.relationship()
    streamable_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("streamable.id"),nullable=True
    )

class TranscodeSession(BaseModel):
    __tablename__ = 'transcode_session'
    client_device_user_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("client_device_user.id"),nullable=False
    )
    video_file_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("video_file.id"),nullable=True
    )
    streamable_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("streamable.id"),nullable=True
    )
    process_id = sa.Column(sa.Integer)
    stream_port = sa.Column(sa.Integer)
    transcode_directory = sa.Column(sa.Text)
    transcode_file = sa.Column(sa.Text)

class CachedText(BaseModel):
    __tablename__ = "cached_text"
    key = sa.Column(sa.Text)
    data = sa.Column(sa.Text)
    time_to_live_seconds = sa.Column(sa.Integer)

class Job(BaseModel):
    __tablename__ = "job"
    kind = sa.Column(sa.Text)
    message = sa.Column(sa.Text)
    status = sa.Column(sa.Text)
    logs_json = sa.Column(sa.Text)
    input_json = sa.Column(sa.Text)

class Tag(BaseModel):
    __tablename__ = "tag"
    name = sa.Column(sa.Text)
    movies: sorm.Mapped[List["Movie"]] = sorm.relationship(secondary="movie_tag",back_populates="tags")
    shows: sorm.Mapped[List["Show"]] = sorm.relationship(secondary="show_tag",back_populates="tags")
    show_seasons: sorm.Mapped[List["ShowSeason"]] = sorm.relationship(secondary="show_season_tag",back_populates="tags")
    show_episodes: sorm.Mapped[List["ShowEpisode"]] = sorm.relationship(secondary="show_episode_tag",back_populates="tags")
    stream_sources: sorm.Mapped[List["StreamSource"]] = sorm.relationship(secondary="stream_source_tag",back_populates="tags")
    streamables: sorm.Mapped[List["Streamable"]] = sorm.relationship(secondary="streamable_tag",back_populates="tags")

class ImageFile(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'image_file'
    __tablename__ = "image_file"
    shelf_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("shelf.id"))
    kind = sa.Column(sa.Text)
    local_path = sa.Column(sa.Text)
    web_path = sa.Column(sa.Text)
    network_path = sa.Column(sa.Text)
    thumbnail_web_path = sa.Column(sa.Text)
    movie: sorm.Mapped["Movie"] = sorm.relationship(secondary="movie_image_file", back_populates="image_files")
    movie_image_file: sorm.Mapped["MovieImageFile"] = sorm.relationship(back_populates="image_file",overlaps="movie")
    show_episode: sorm.Mapped["ShowEpisode"] = sorm.relationship(secondary="show_episode_image_file", back_populates="image_files")
    show_episode_image_file: sorm.Mapped["ShowEpisodeImageFile"] = sorm.relationship(back_populates="image_file",overlaps="show_episode")
    show_season: sorm.Mapped["ShowSeason"] = sorm.relationship(secondary="show_season_image_file", back_populates="image_files")
    show_season_image_file: sorm.Mapped["ShowSeasonImageFile"] = sorm.relationship(back_populates="image_file",overlaps="show_season")
    show: sorm.Mapped["Show"] = sorm.relationship(secondary="show_image_file", back_populates="image_files")
    show_image_file: sorm.Mapped["ShowImageFile"] = sorm.relationship(back_populates="image_file",overlaps="show")
    keepsake: sorm.Mapped["Keepsake"] = sorm.relationship(secondary="keepsake_image_file", back_populates="image_files")
    keepsake_image_file: sorm.Mapped["KeepsakeImageFile"] = sorm.relationship(back_populates="image_file",overlaps="keepsake")

class MetadataFile(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'metadata_file'
    __tablename__ = "metadata_file"
    shelf_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("shelf.id"))
    kind = sa.Column(sa.Text)
    local_path = sa.Column(sa.Text)
    web_path = sa.Column(sa.Text)
    network_path = sa.Column(sa.Text)
    xml_content = sa.Column(sa.Text)
    movie: sorm.Mapped["Movie"] = sorm.relationship(secondary="movie_metadata_file", back_populates="metadata_files")
    movie_metadata_file: sorm.Mapped["MovieMetadataFile"] = sorm.relationship(back_populates="metadata_file",overlaps="movie")
    show_episode: sorm.Mapped["ShowEpisode"] = sorm.relationship(secondary="show_episode_metadata_file", back_populates="metadata_files")
    show_episode_metadata_file: sorm.Mapped["ShowEpisodeMetadataFile"] = sorm.relationship(back_populates="metadata_file",overlaps="show_episode")
    show_season: sorm.Mapped["ShowSeason"] = sorm.relationship(secondary="show_season_metadata_file", back_populates="metadata_files")
    show_season_metadata_file: sorm.Mapped["ShowSeasonMetadataFile"] = sorm.relationship(back_populates="metadata_file",overlaps="show_season")
    show: sorm.Mapped["Show"] = sorm.relationship(secondary="show_metadata_file", back_populates="metadata_files")
    show_metadata_file: sorm.Mapped["ShowMetadataFile"] = sorm.relationship(back_populates="metadata_file",overlaps="show")


class VideoFile(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'video_file'
    __tablename__ = "video_file"
    shelf_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("shelf.id"))
    kind = sa.Column(sa.Text)
    local_path = sa.Column(sa.Text)
    web_path = sa.Column(sa.Text)
    network_path = sa.Column(sa.Text)
    ffprobe_pruned_json = sa.Column(sa.Text)
    version = sa.Column(sa.Text)
    name = sa.Column(sa.Text)
    movie: sorm.Mapped["Movie"] = sorm.relationship(secondary="movie_video_file", back_populates="video_files")
    movie_video_file: sorm.Mapped["MovieVideoFile"] = sorm.relationship(back_populates="video_file",overlaps="movie")
    show_episode: sorm.Mapped["ShowEpisode"] = sorm.relationship(secondary="show_episode_video_file", back_populates="video_files")
    show_episode_video_file: sorm.Mapped["ShowEpisodeVideoFile"] = sorm.relationship(back_populates="video_file",overlaps="show_episode")
    keepsake: sorm.Mapped["Keepsake"] = sorm.relationship(secondary="keepsake_video_file", back_populates="video_files")
    keepsake_video_file: sorm.Mapped["KeepsakeVideoFile"] = sorm.relationship(back_populates="video_file",overlaps="keepsake")

class Shelf(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'shelf'
    __tablename__ = "shelf"
    name = sa.Column(sa.Text)
    kind = sa.Column(sa.Text)
    local_path = sa.Column(sa.Text)
    network_path = sa.Column(sa.Text)
    movies: sorm.Mapped[List["Movie"]] = sorm.relationship(secondary="movie_shelf",back_populates="shelf")
    shows: sorm.Mapped[List["Show"]] = sorm.relationship(secondary="show_shelf",back_populates="shelf")
    keepsakes: sorm.Mapped[List["Keepsake"]] = sorm.relationship(secondary="keepsake_shelf",back_populates="shelf")


class Movie(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'movie'
    __tablename__ = "movie"
    name = sa.Column(sa.Text)
    release_year = sa.Column(sa.Integer)
    directory = sa.Column(sa.Text)
    remote_metadata_id = sa.Column(sa.Integer)
    remote_metadata_source = sa.Column(sa.Text)
    tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="movie_tag",back_populates="movies")
    video_files: sorm.Mapped[List["VideoFile"]] = sorm.relationship(secondary="movie_video_file",back_populates="movie",overlaps="movie_video_file")
    image_files: sorm.Mapped[List["ImageFile"]] = sorm.relationship(secondary="movie_image_file",back_populates="movie",overlaps="movie_image_file")
    metadata_files: sorm.Mapped[List["MetadataFile"]] = sorm.relationship(secondary="movie_metadata_file",back_populates="movie",overlaps="movie_metadata_file")
    shelf: sorm.Mapped["Shelf"] = sorm.relationship(secondary="movie_shelf")
    watch_count: sorm.Mapped['WatchCount'] = sorm.relationship(overlaps="movie")

    def get_tag_ids(self):
        if not self.tags:
            return []
        return [xx.id for xx in self.tags]

class MovieShelf(BaseModel):
    __tablename__ = "movie_shelf"
    movie_id = sa.Column(sa.Integer, sa.ForeignKey("movie.id"))
    shelf_id = sa.Column(sa.Integer, sa.ForeignKey("shelf.id"))


class MovieTag(BaseModel):
    __tablename__ = "movie_tag"
    movie_id = sa.Column(sa.Integer, sa.ForeignKey("movie.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))


class MovieImageFile(BaseModel):
    __tablename__ = "movie_image_file"
    movie_id = sa.Column(sa.Integer, sa.ForeignKey("movie.id"))
    image_file_id = sa.Column(sa.Integer, sa.ForeignKey("image_file.id"))
    image_file: sorm.Mapped['ImageFile'] = sorm.relationship(back_populates='movie_image_file',overlaps="movie,image_files")


class MovieMetadataFile(BaseModel):
    __tablename__ = "movie_metadata_file"
    movie_id = sa.Column(sa.Integer, sa.ForeignKey("movie.id"))
    metadata_file_id = sa.Column(sa.Integer, sa.ForeignKey("metadata_file.id"))
    metadata_file: sorm.Mapped['MetadataFile'] = sorm.relationship(back_populates='movie_metadata_file',overlaps="movie,metadata_files")


class MovieVideoFile(BaseModel):
    __tablename__ = "movie_video_file"
    movie_id = sa.Column(sa.Integer, sa.ForeignKey("movie.id"))
    video_file_id = sa.Column(sa.Integer, sa.ForeignKey("video_file.id"))
    video_file: sorm.Mapped['VideoFile'] = sorm.relationship(back_populates="movie_video_file",overlaps="movie,video_files")

class PlayingQueue(BaseModel):
    __tablename__ = "playing_queue"
    client_device_user_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("client_device_user.id"),
        nullable=False
    )
    client_device_user: sorm.Mapped["ClientDeviceUser"] = sorm.relationship()
    source = sa.Column(sa.Text)
    content = sa.Column(sa.Text)
    progress = sa.Column(sa.Integer)
    length = sa.Column(sa.Integer)

class Show(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'show'
    __tablename__ = "show"
    name = sa.Column(sa.Text)
    directory = sa.Column(sa.Text)
    release_year = sa.Column(sa.Integer)
    remote_metadata_id = sa.Column(sa.Integer)
    remote_metadata_source = sa.Column(sa.Text)
    shelf: sorm.Mapped["Shelf"] = sorm.relationship(secondary="show_shelf",back_populates="shows")
    seasons: sorm.Mapped[List["ShowSeason"]] = sorm.relationship(back_populates='show',order_by="ShowSeason.season_order_counter")
    image_files: sorm.Mapped[List["ImageFile"]] = sorm.relationship(secondary="show_image_file",back_populates="show",overlaps="show_image_file")
    metadata_files: sorm.Mapped[List["MetadataFile"]] = sorm.relationship(secondary="show_metadata_file",back_populates="show",overlaps="show_metadata_file")
    tags: sorm.Mapped[List['Tag']] = sorm.relationship(secondary="show_tag",back_populates="shows")

    def get_tag_ids(self):
        if not self.tags:
            return []
        return [xx.id for xx in self.tags]

class ShowShelf(BaseModel):
    __tablename__ = "show_shelf"
    show_id = sa.Column(sa.Integer, sa.ForeignKey("show.id"))
    shelf_id = sa.Column(sa.Integer, sa.ForeignKey("shelf.id"))

class ShowTag(BaseModel):
    __tablename__ = "show_tag"
    show_id = sa.Column(sa.Integer, sa.ForeignKey("show.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))

class ShowImageFile(BaseModel):
    __tablename__ = "show_image_file"
    show_id = sa.Column(sa.Integer, sa.ForeignKey("show.id"))
    image_file_id = sa.Column(sa.Integer, sa.ForeignKey("image_file.id"))
    image_file: sorm.Mapped['ImageFile'] = sorm.relationship(back_populates='show_image_file',overlaps="show,image_files")


class ShowMetadataFile(BaseModel):
    __tablename__ = "show_metadata_file"
    show_id = sa.Column(sa.Integer, sa.ForeignKey("show.id"))
    metadata_file_id = sa.Column(sa.Integer, sa.ForeignKey("metadata_file.id"))
    metadata_file: sorm.Mapped['MetadataFile'] = sorm.relationship(back_populates='show_metadata_file',overlaps="show,metadata_files")

class ShowSeason(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'show_season'
    __tablename__ = "show_season"
    name = sa.Column(sa.Text)
    directory = sa.Column(sa.Text)
    season_order_counter = sa.Column(sa.Integer)
    show_id: sorm.Mapped[int] = sa.Column(sa.Integer, sa.ForeignKey("show.id"))
    show: sorm.Mapped["Show"] = sorm.relationship(back_populates="seasons")
    episodes: sorm.Mapped[List["ShowEpisode"]] = sorm.relationship(back_populates="season",order_by="ShowEpisode.episode_order_counter")
    image_files: sorm.Mapped[List["ImageFile"]] = sorm.relationship(secondary="show_season_image_file",back_populates="show_season",overlaps="show_season_image_file")
    metadata_files: sorm.Mapped[List["MetadataFile"]] = sorm.relationship(secondary="show_season_metadata_file",back_populates="show_season",overlaps="show_season_metadata_file")
    tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="show_season_tag",back_populates="show_seasons")

    def get_tag_ids(self):
        tag_ids = []
        if self.show:
            tag_ids += self.show.get_tag_ids()
        return [xx.id for xx in self.tags] + tag_ids

class ShowSeasonTag(BaseModel):
    __tablename__ = "show_season_tag"
    show_season_id = sa.Column(sa.Integer, sa.ForeignKey("show_season.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))

class ShowSeasonImageFile(BaseModel):
    __tablename__ = "show_season_image_file"
    show_season_id = sa.Column(sa.Integer, sa.ForeignKey("show_season.id"))
    image_file_id = sa.Column(sa.Integer, sa.ForeignKey("image_file.id"))
    image_file: sorm.Mapped['ImageFile'] = sorm.relationship(back_populates='show_season_image_file',overlaps="show_season,image_files")


class ShowSeasonMetadataFile(BaseModel):
    __tablename__ = "show_season_metadata_file"
    show_season_id = sa.Column(sa.Integer, sa.ForeignKey("show_season.id"))
    metadata_file_id = sa.Column(sa.Integer, sa.ForeignKey("metadata_file.id"))
    metadata_file: sorm.Mapped['MetadataFile'] = sorm.relationship(back_populates='show_season_metadata_file',overlaps="show_season,metadata_files")

class ShowEpisode(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'show_episode'
        self.episode_slug = ''

    __tablename__ = "show_episode"
    name = sa.Column(sa.Text)
    episode_order_counter = sa.Column(sa.Integer)
    episode_end_order_counter = sa.Column(sa.Integer)
    show_season_id: sorm.Mapped[int] = sorm.mapped_column(sa.ForeignKey("show_season.id"))
    video_files: sorm.Mapped[List["VideoFile"]] = sorm.relationship(secondary="show_episode_video_file",back_populates="show_episode",overlaps="show_episode_video_file")
    image_files: sorm.Mapped[List["ImageFile"]] = sorm.relationship(secondary="show_episode_image_file",back_populates="show_episode",overlaps="show_episode_image_file")
    metadata_files: sorm.Mapped[List["MetadataFile"]] = sorm.relationship(secondary="show_episode_metadata_file",back_populates="show_episode",overlaps="show_episode_metadata_file")
    season: sorm.Mapped["ShowSeason"] = sorm.relationship(back_populates="episodes")
    tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="show_episode_tag",back_populates="show_episodes")
    watch_count: sorm.Mapped['WatchCount'] = sorm.relationship(overlaps="show_episode")

    def get_tag_ids(self):
        tag_ids = []
        if self.season.show and self.season.show.tags:
            tag_ids += self.season.show.get_tag_ids()
        if self.season and self.season.tags:
            tag_ids += self.season.get_tag_ids()
        if not self.tags:
            return tag_ids
        return [xx.id for xx in self.tags] + tag_ids

class ShowEpisodeTag(BaseModel):
    __tablename__ = "show_episode_tag"
    show_episode_id = sa.Column(sa.Integer, sa.ForeignKey("show_episode.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))

class ShowEpisodeImageFile(BaseModel):
    __tablename__ = "show_episode_image_file"
    show_episode_id = sa.Column(sa.Integer, sa.ForeignKey("show_episode.id"))
    image_file_id = sa.Column(sa.Integer, sa.ForeignKey("image_file.id"))
    image_file: sorm.Mapped['ImageFile'] = sorm.relationship(back_populates='show_episode_image_file',overlaps="image_files,show_episode")


class ShowEpisodeMetadataFile(BaseModel):
    __tablename__ = "show_episode_metadata_file"
    show_episode_id = sa.Column(sa.Integer, sa.ForeignKey("show_episode.id"))
    metadata_file_id = sa.Column(sa.Integer, sa.ForeignKey("metadata_file.id"))
    metadata_file: sorm.Mapped['MetadataFile'] = sorm.relationship(back_populates='show_episode_metadata_file',overlaps="metadata_files,show_episode")


class ShowEpisodeVideoFile(BaseModel):
    __tablename__ = "show_episode_video_file"
    show_episode_id = sa.Column(sa.Integer, sa.ForeignKey("show_episode.id"))
    video_file_id = sa.Column(sa.Integer, sa.ForeignKey("video_file.id"))
    video_file: sorm.Mapped['VideoFile'] = sorm.relationship(back_populates="show_episode_video_file",overlaps="video_files,show_episode")


class StreamSource(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'stream_source'
    __tablename__ = "stream_source"
    kind = sa.Column(sa.Text)
    name = sa.Column(sa.Text, unique=True)
    url = sa.Column(sa.Text, unique=True)
    username = sa.Column(sa.Text)
    password = sa.Column(sa.Text)
    streamables: sorm.Mapped[List["Streamable"]] = sorm.relationship(
        cascade="delete",passive_deletes=True
    )
    tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="stream_source_tag",back_populates="stream_sources")

    def get_tag_ids(self):
        if not self.tags:
            return []
        return [xx.id for xx in self.tags]

class StreamSourceTag(BaseModel):
    __tablename__ = 'stream_source_tag'
    stream_source_id = sa.Column(sa.Integer, sa.ForeignKey("stream_source.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))

class Streamable(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'streamable'
    __tablename__ = "streamable"
    url = sa.Column(sa.Text)
    name = sa.Column(sa.Text)
    stream_source_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("stream_source.id")
    )
    stream_source: sorm.Mapped["StreamSource"] = sorm.relationship(back_populates="streamables")
    tags: sorm.Mapped[List["Tag"]] = sorm.relationship(secondary="streamable_tag",back_populates="streamables")

    def _ids(self):
        return [xx.id for xx in self.tags]

class StreamableTag(BaseModel):
    __tablename__ = 'streamable_tag'
    streamable_id = sa.Column(sa.Integer, sa.ForeignKey("streamable.id"))
    tag_id = sa.Column(sa.Integer, sa.ForeignKey("tag.id"))

class StreamableChannel(BaseModel):
    __tablename__ = "streamable_channel"
    parsed_id = sa.Column(sa.Text)
    parsed_name = sa.Column(sa.Text)
    parsed_number = sa.Column(sa.Float)
    edited_id = sa.Column(sa.Text)
    edited_name = sa.Column(sa.Text)
    edited_number = sa.Column(sa.Float)
    schedules: sorm.Mapped[List["StreamableSchedule"]] = sorm.relationship(
        cascade="delete", passive_deletes=True
    )

class StreamableSchedule(BaseModel):
    __tablename__ = "streamable_schedule"
    name = sa.Column(sa.Text)
    description = sa.Column(sa.Text)
    start_datetime = sa.Column(sa.DateTime)
    stop_datetime = sa.Column(sa.DateTime)
    channel_id: sorm.Mapped[int] = sorm.mapped_column(
        sa.ForeignKey("streamable_channel.id")
    )
    channel: sorm.Mapped["StreamableChannel"] = sorm.relationship(back_populates="schedules")

class Keepsake(BaseModel):
    @sorm.reconstructor
    def init_on_load(self):
        self.model_kind = 'keepsake'
    __tablename__ = "keepsake"
    directory = sa.Column(sa.Text)
    video_files: sorm.Mapped[List["VideoFile"]] = sorm.relationship(secondary="keepsake_video_file",back_populates="keepsake",overlaps="keepsake_video_file")
    image_files: sorm.Mapped[List["ImageFile"]] = sorm.relationship(secondary="keepsake_image_file",back_populates="keepsake",overlaps="keepsake_image_file")
    shelf: sorm.Mapped["Shelf"] = sorm.relationship(secondary="keepsake_shelf")

class KeepsakeShelf(BaseModel):
    __tablename__ = "keepsake_shelf"
    keepsake_id = sa.Column(sa.Integer, sa.ForeignKey("keepsake.id"))
    shelf_id = sa.Column(sa.Integer, sa.ForeignKey("shelf.id"))

class KeepsakeVideoFile(BaseModel):
    __tablename__ = "keepsake_video_file"
    keepsake_id = sa.Column(sa.Integer, sa.ForeignKey("keepsake.id"))
    video_file_id = sa.Column(sa.Integer, sa.ForeignKey("video_file.id"))
    video_file: sorm.Mapped['VideoFile'] = sorm.relationship(back_populates="keepsake_video_file",overlaps="keepsake,video_files")

class KeepsakeImageFile(BaseModel):
    __tablename__ = "keepsake_image_file"
    keepsake_id = sa.Column(sa.Integer, sa.ForeignKey("keepsake.id"))
    image_file_id = sa.Column(sa.Integer, sa.ForeignKey("image_file.id"))
    image_file: sorm.Mapped['ImageFile'] = sorm.relationship(back_populates='keepsake_image_file',overlaps="keepsake,image_files")

# For whatever reason, aliased cannot be called until after ALL models are defined
# Otherwise you get a bunch of "model cannot map X to Y" errors
ShowTagAlias = sorm.aliased(Tag)
ShowSeasonTagAlias = sorm.aliased(Tag)
ShowEpisodeTagAlias = sorm.aliased(Tag)